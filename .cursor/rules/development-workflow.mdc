# 开发工作流

## 开发环境设置
1. 确保 Node.js 18.18.0 和 Yarn 1.22.19 已安装
2. 运行 `yarn install` 安装依赖
3. 运行 `yarn dev` 启动开发模式

## 代码开发流程
1. **功能开发**: 在 `src/` 目录下编写代码
2. **测试编写**: 在 `src/__tests__/` 目录下编写测试
3. **代码检查**: 运行 `yarn lint` 检查代码质量
4. **代码格式化**: 运行 `yarn format` 格式化代码
5. **测试运行**: 运行 `yarn test` 确保测试通过

## 文件组织
- **核心逻辑**: `src/main.ts`, `src/api.ts`, `src/util.ts`
- **设置界面**: `src/settingsTab.ts`, `src/settings/`
- **测试文件**: `src/__tests__/`, `src/__mocks__/`
- **配置文件**: 根目录下的各种配置文件

## 调试技巧
- 使用 `console.log()` 进行调试（生产环境会自动移除）
- 利用 Obsidian 开发者工具查看插件日志
- 使用 Jest 的 `--verbose` 模式获取详细测试信息
- 通过 `yarn test:watch` 进行交互式测试

## 性能监控
- 监控 API 调用频率和响应时间
- 检查内存使用情况
- 优化大文件处理性能
- 使用性能分析工具识别瓶颈

## 错误处理
- 捕获并记录所有异步操作的错误
- 提供用户友好的错误消息
- 实现优雅的降级处理
- 记录详细的错误日志用于调试

## 代码审查
- 确保代码符合 TypeScript 标准
- 验证测试覆盖率
- 检查性能影响
- 确认用户体验改进
description:
globs:
alwaysApply: false
---
